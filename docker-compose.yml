version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: k-group-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kg}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - k-group-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-kg}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: k-group-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      NODE_ENV: production
      PORT: 8080
      ADDRESS: 0.0.0.0
      # Database configuration
      POSTGRESQL_HOST: postgres
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USER: ${POSTGRES_USER:-postgres}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRESQL_DB: ${POSTGRES_DB:-kg}
      # JWT configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      # CORS origins for production
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:4200}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - k-group-network
    volumes:
      # Mount logs directory for debugging (optional)
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

  # Nginx Reverse Proxy (optional but recommended for production)
  nginx:
    image: nginx:alpine
    container_name: k-group-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # For SSL certificates (create this folder if using HTTPS)
    depends_on:
      app:
        condition: service_healthy
    networks:
      - k-group-network
    profiles:
      - production  # Only start nginx when using production profile

volumes:
  postgres_data:
    driver: local

networks:
  k-group-network:
    driver: bridge
